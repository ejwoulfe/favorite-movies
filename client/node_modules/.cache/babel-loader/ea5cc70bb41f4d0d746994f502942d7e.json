{"ast":null,"code":"var _jsxFileName = \"D:\\\\Favorite Movies Project\\\\client\\\\src\\\\components\\\\lists\\\\view_components\\\\views.jsx\";\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport GridView from './grid_view/grid_view';\nimport ListView from './list_view/list_view';\nimport list_view_icon from \"../../../Assets/UI Icons/list-view.svg\";\nimport grid_view_icon from \"../../../Assets/UI Icons/grid-view.svg\";\n\nfunction Views(props) {\n  const [isMovieGridView, setIsMovieGridView] = useState(JSON.parse(sessionStorage.getItem('movieGridViewBoolean')) || false);\n  const [isActorGridView, setIsActorGridView] = useState(JSON.parse(sessionStorage.getItem('actorGridViewBoolean')) || false);\n  const [objectType, setObjectType] = useState(props.type);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    /*\r\n    *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n    *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n    */\n    sessionStorage.setItem(props.type + 'GridViewBoolean', isActorGridView);\n    let yep = null;\n\n    if (props.type === 'actor') {\n      yep = isActorGridView;\n    } else {\n      yep = isMovieGridView;\n    }\n\n    if (yep) {\n      document.getElementById(\"list_view_button\").disabled = false;\n      document.getElementById(\"list_view_button\").style.opacity = \"1\";\n      document.getElementById(\"grid_view_button\").disabled = true;\n      document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\n    } else {\n      document.getElementById(\"grid_view_button\").disabled = false;\n      document.getElementById(\"grid_view_button\").style.opacity = \"1\";\n      document.getElementById(\"list_view_button\").disabled = true;\n      document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\n    }\n  }, [isActorGridView, isMovieGridView, props.type]);\n  useEffect(() => {\n    if (props.data.length > 0) {\n      setLoading(false);\n    }\n  }, [props]);\n\n  function loadViews() {\n    if (objectType) {\n      return /*#__PURE__*/React.createElement(GridView, {\n        data: props.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(ListView, {\n        data: props.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      });\n    }\n  }\n\n  function changeViewOption() {\n    console.log(props.type);\n\n    if (props.type === 'actor') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n        onClick: () => {\n          setIsActorGridView(isActorGridView => !isActorGridView);\n        },\n        className: \"view_buttons\",\n        id: \"list_view_button\",\n        type: \"image\",\n        src: list_view_icon,\n        alt: \"List view button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        onClick: () => {\n          setIsActorGridView(isActorGridView => !isActorGridView);\n        },\n        className: \"view_buttons\",\n        id: \"grid_view_button\",\n        type: \"image\",\n        src: grid_view_icon,\n        alt: \"Grid view button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }));\n    } else if (props.type === 'movie') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n        onClick: () => {\n          setIsMovieGridView(isMovieGridView => !isMovieGridView);\n        },\n        className: \"view_buttons\",\n        id: \"list_view_button\",\n        type: \"image\",\n        src: list_view_icon,\n        alt: \"List view button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        onClick: () => {\n          setIsMovieGridView(isMovieGridView => !isMovieGridView);\n        },\n        className: \"view_buttons\",\n        id: \"grid_view_button\",\n        type: \"image\",\n        src: grid_view_icon,\n        alt: \"Grid view button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"display_options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, changeViewOption()), loading ? /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 24\n    }\n  }, \"Loading\") : loadViews(props.type));\n}\n\nexport default Views;","map":{"version":3,"sources":["D:/Favorite Movies Project/client/src/components/lists/view_components/views.jsx"],"names":["React","useState","useEffect","GridView","ListView","Views","props","isMovieGridView","setIsMovieGridView","JSON","parse","sessionStorage","getItem","isActorGridView","setIsActorGridView","objectType","setObjectType","type","loading","setLoading","setItem","yep","document","getElementById","disabled","style","opacity","data","length","loadViews","changeViewOption","console","log","list_view_icon","grid_view_icon"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport GridView from './grid_view/grid_view';\r\nimport ListView from './list_view/list_view';\r\nimport list_view_icon from '../../../Assets/UI Icons/list-view.svg';\r\nimport grid_view_icon from '../../../Assets/UI Icons/grid-view.svg';\r\n\r\n\r\nfunction Views(props) {\r\n    const [isMovieGridView, setIsMovieGridView] = useState(JSON.parse(sessionStorage.getItem('movieGridViewBoolean')) || false);\r\n    const [isActorGridView, setIsActorGridView] = useState(JSON.parse(sessionStorage.getItem('actorGridViewBoolean')) || false);\r\n    const [objectType, setObjectType] = useState(props.type);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        /*\r\n        *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n        *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n        */\r\n        sessionStorage.setItem(props.type + 'GridViewBoolean', isActorGridView);\r\n        let yep = null;\r\n        if (props.type === 'actor') {\r\n            yep = isActorGridView;\r\n        } else {\r\n            yep = isMovieGridView;\r\n        }\r\n\r\n\r\n\r\n\r\n        if (yep) {\r\n\r\n            document.getElementById(\"list_view_button\").disabled = false;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"grid_view_button\").disabled = true;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\r\n\r\n\r\n\r\n        } else {\r\n            document.getElementById(\"grid_view_button\").disabled = false;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"list_view_button\").disabled = true;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\r\n\r\n        }\r\n\r\n    }, [isActorGridView, isMovieGridView, props.type]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.data.length > 0) {\r\n            setLoading(false);\r\n        }\r\n\r\n    }, [props]);\r\n\r\n\r\n    function loadViews() {\r\n\r\n        if (objectType) {\r\n            return (\r\n                <GridView data={props.data} />\r\n            )\r\n        } else {\r\n            return (\r\n                <ListView data={props.data} />\r\n            )\r\n        }\r\n    }\r\n    function changeViewOption() {\r\n        console.log(props.type)\r\n        if (props.type === 'actor') {\r\n            return (\r\n                <>\r\n                    <input onClick={() => { setIsActorGridView((isActorGridView) => !isActorGridView) }} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view_icon} alt=\"List view button\" />\r\n                    <input onClick={() => { setIsActorGridView((isActorGridView) => !isActorGridView) }} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view_icon} alt=\"Grid view button\" />\r\n                </>\r\n            )\r\n        } else if (props.type === 'movie') {\r\n            return (\r\n                <>\r\n                    <input onClick={() => { setIsMovieGridView((isMovieGridView) => !isMovieGridView) }} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view_icon} alt=\"List view button\" />\r\n                    <input onClick={() => { setIsMovieGridView((isMovieGridView) => !isMovieGridView) }} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view_icon} alt=\"Grid view button\" />\r\n                </>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"display_options\">\r\n                {changeViewOption()}\r\n            </div>\r\n\r\n            {loading ? <h1>Loading</h1> : loadViews(props.type)}\r\n        </>\r\n\r\n    )\r\n\r\n}\r\nexport default Views;"]},"metadata":{},"sourceType":"module"}