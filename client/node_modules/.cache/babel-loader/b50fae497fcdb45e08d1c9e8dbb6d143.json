{"ast":null,"code":"import React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport GridView from './grid_view/grid_view';\nimport ListView from './list_view/list_view';\nimport list_view_icon from \"../../../Assets/UI Icons/list-view.svg\";\nimport grid_view_icon from \"../../../Assets/UI Icons/grid-view.svg\";\n\nfunction Views(props) {\n  const [isMovieGridView, setIsMovieGridView] = useState(JSON.parse(sessionStorage.getItem('movieGridViewBoolean')) || false);\n  const [isActorGridView, setIsActorGridView] = useState(JSON.parse(sessionStorage.getItem('actorGridViewBoolean')) || false);\n  const [loading, setLoading] = useState(true);\n  console.log(props.type); // useEffect(() => {\n  //     /*\n  //     *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\n  //     *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\n  //     */\n  //     sessionStorage.setItem('gridViewBoolean', isGridView);\n  //     if (isGridView) {\n  //         document.getElementById(\"list_view_button\").disabled = false;\n  //         document.getElementById(\"list_view_button\").style.opacity = \"1\";\n  //         document.getElementById(\"grid_view_button\").disabled = true;\n  //         document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\n  //     } else {\n  //         document.getElementById(\"grid_view_button\").disabled = false;\n  //         document.getElementById(\"grid_view_button\").style.opacity = \"1\";\n  //         document.getElementById(\"list_view_button\").disabled = true;\n  //         document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\n  //     }\n  // }, [isGridView]);\n\n  useEffect(() => {\n    if (props.data.length > 0) {\n      setLoading(false);\n    }\n  }, [props]); // function loadViews(type) {\n  //     if (isGridView) {\n  //         return (\n  //             <GridView data={props.data} />\n  //         )\n  //     } else {\n  //         return (\n  //             <ListView data={props.data} />\n  //         )\n  //     }\n  // }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\n\nexport default Views;","map":{"version":3,"sources":["D:/Favorite Movies Project/client/src/components/lists/view_components/views.jsx"],"names":["React","useState","useEffect","GridView","ListView","Views","props","isMovieGridView","setIsMovieGridView","JSON","parse","sessionStorage","getItem","isActorGridView","setIsActorGridView","loading","setLoading","console","log","type","data","length"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;;AAKA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,sBAAvB,CAAX,KAA8D,KAA/D,CAAtD;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,sBAAvB,CAAX,KAA8D,KAA/D,CAAtD;AAEA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACa,IAAlB,EALkB,CAOlB;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;AAGAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,KAAK,CAACc,IAAN,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AACvBL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AAEJ,GALQ,EAKN,CAACV,KAAD,CALM,CAAT,CAtCkB,CA8ClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI,yCADJ;AAYH;;AACD,eAAeD,KAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport GridView from './grid_view/grid_view';\r\nimport ListView from './list_view/list_view';\r\nimport list_view_icon from '../../../Assets/UI Icons/list-view.svg';\r\nimport grid_view_icon from '../../../Assets/UI Icons/grid-view.svg';\r\n\r\n\r\nfunction Views(props) {\r\n    const [isMovieGridView, setIsMovieGridView] = useState(JSON.parse(sessionStorage.getItem('movieGridViewBoolean')) || false);\r\n    const [isActorGridView, setIsActorGridView] = useState(JSON.parse(sessionStorage.getItem('actorGridViewBoolean')) || false);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    console.log(props.type);\r\n\r\n    // useEffect(() => {\r\n    //     /*\r\n    //     *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n    //     *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n    //     */\r\n\r\n    //     sessionStorage.setItem('gridViewBoolean', isGridView);\r\n\r\n\r\n    //     if (isGridView) {\r\n\r\n    //         document.getElementById(\"list_view_button\").disabled = false;\r\n    //         document.getElementById(\"list_view_button\").style.opacity = \"1\";\r\n\r\n    //         document.getElementById(\"grid_view_button\").disabled = true;\r\n    //         document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\r\n\r\n\r\n\r\n    //     } else {\r\n    //         document.getElementById(\"grid_view_button\").disabled = false;\r\n    //         document.getElementById(\"grid_view_button\").style.opacity = \"1\";\r\n\r\n    //         document.getElementById(\"list_view_button\").disabled = true;\r\n    //         document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\r\n\r\n    //     }\r\n\r\n    // }, [isGridView]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.data.length > 0) {\r\n            setLoading(false);\r\n        }\r\n\r\n    }, [props]);\r\n\r\n\r\n    // function loadViews(type) {\r\n    //     if (isGridView) {\r\n    //         return (\r\n    //             <GridView data={props.data} />\r\n    //         )\r\n    //     } else {\r\n    //         return (\r\n    //             <ListView data={props.data} />\r\n    //         )\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            {/* <div id=\"display_options\">\r\n                <input onClick={() => { setIsGridView((isGridView) => !isGridView) }} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view_icon} alt=\"List view button\" />\r\n                <input onClick={() => { setIsGridView((isGridView) => !isGridView) }} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view_icon} alt=\"Grid view button\" />\r\n            </div>\r\n\r\n            {loading ? <h1>Loading</h1> : loadViews()} */}\r\n        </>\r\n\r\n    )\r\n\r\n}\r\nexport default Views;"]},"metadata":{},"sourceType":"module"}