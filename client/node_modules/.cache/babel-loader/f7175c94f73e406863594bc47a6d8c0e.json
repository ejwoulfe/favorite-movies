{"ast":null,"code":"var _jsxFileName = \"D:\\\\Favorite Movies Project\\\\client\\\\src\\\\components\\\\lists\\\\view_components\\\\views.jsx\";\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport GridView from './grid_view/grid_view';\nimport ListView from './list_view/list_view';\nimport list_view_icon from \"../../../Assets/UI Icons/list-view.svg\";\nimport grid_view_icon from \"../../../Assets/UI Icons/grid-view.svg\";\n\nfunction Views(props) {\n  const [isGridView, setIsGridView] = useState(JSON.parse(sessionStorage.getItem('gridViewBoolean')) || false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    /*\r\n    *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n    *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n    */\n    sessionStorage.setItem('gridViewBoolean', isGridView);\n\n    if (isGridView) {\n      document.getElementById(\"list_view_button\").disabled = false;\n      document.getElementById(\"list_view_button\").style.opacity = \"1\";\n      document.getElementById(\"grid_view_button\").disabled = true;\n      document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\n    } else {\n      document.getElementById(\"grid_view_button\").disabled = false;\n      document.getElementById(\"grid_view_button\").style.opacity = \"1\";\n      document.getElementById(\"list_view_button\").disabled = true;\n      document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\n    }\n  }, [isGridView]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"display_options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => {\n      setIsGridView(isGridView => !isGridView);\n    },\n    className: \"view_buttons\",\n    id: \"list_view_button\",\n    type: \"image\",\n    src: list_view_icon,\n    alt: \"List view button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => {\n      setIsGridView(isGridView => !isGridView);\n    },\n    className: \"view_buttons\",\n    id: \"grid_view_button\",\n    type: \"image\",\n    src: grid_view_icon,\n    alt: \"Grid view button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  })), isGridView ? /*#__PURE__*/React.createElement(GridView, {\n    data: props.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 27\n    }\n  }) : /*#__PURE__*/React.createElement(ListView, {\n    data: props.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 60\n    }\n  }));\n}\n\nexport default Views;","map":{"version":3,"sources":["D:/Favorite Movies Project/client/src/components/lists/view_components/views.jsx"],"names":["React","useState","useEffect","GridView","ListView","Views","props","isGridView","setIsGridView","JSON","parse","sessionStorage","getItem","loading","setLoading","setItem","document","getElementById","disabled","style","opacity","list_view_icon","grid_view_icon","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;;AAKA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,iBAAvB,CAAX,KAAyD,KAA1D,CAA5C;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;;;;AAKAS,IAAAA,cAAc,CAACI,OAAf,CAAuB,iBAAvB,EAA0CR,UAA1C;;AAGA,QAAIA,UAAJ,EAAgB;AAEZS,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CC,QAA5C,GAAuD,KAAvD;AACAF,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CE,KAA5C,CAAkDC,OAAlD,GAA4D,GAA5D;AAEAJ,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CC,QAA5C,GAAuD,IAAvD;AACAF,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CE,KAA5C,CAAkDC,OAAlD,GAA4D,KAA5D;AAIH,KAVD,MAUO;AACHJ,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CC,QAA5C,GAAuD,KAAvD;AACAF,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CE,KAA5C,CAAkDC,OAAlD,GAA4D,GAA5D;AAEAJ,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CC,QAA5C,GAAuD,IAAvD;AACAF,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CE,KAA5C,CAAkDC,OAAlD,GAA4D,KAA5D;AAEH;AAEJ,GA5BQ,EA4BN,CAACb,UAAD,CA5BM,CAAT;AA8BA,sBACI,uDACI;AAAK,IAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAE,MAAM;AAAEC,MAAAA,aAAa,CAAED,UAAD,IAAgB,CAACA,UAAlB,CAAb;AAA4C,KAApE;AAAsE,IAAA,SAAS,EAAC,cAAhF;AAA+F,IAAA,EAAE,EAAC,kBAAlG;AAAqH,IAAA,IAAI,EAAC,OAA1H;AAAkI,IAAA,GAAG,EAAEc,cAAvI;AAAuJ,IAAA,GAAG,EAAC,kBAA3J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAO,IAAA,OAAO,EAAE,MAAM;AAAEb,MAAAA,aAAa,CAAED,UAAD,IAAgB,CAACA,UAAlB,CAAb;AAA4C,KAApE;AAAsE,IAAA,SAAS,EAAC,cAAhF;AAA+F,IAAA,EAAE,EAAC,kBAAlG;AAAqH,IAAA,IAAI,EAAC,OAA1H;AAAkI,IAAA,GAAG,EAAEe,cAAvI;AAAuJ,IAAA,GAAG,EAAC,kBAA3J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAOKf,UAAU,gBAAG,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAED,KAAK,CAACiB,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBAAoC,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEjB,KAAK,CAACiB,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPnD,CADJ;AAaH;;AACD,eAAelB,KAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport GridView from './grid_view/grid_view';\r\nimport ListView from './list_view/list_view';\r\nimport list_view_icon from '../../../Assets/UI Icons/list-view.svg';\r\nimport grid_view_icon from '../../../Assets/UI Icons/grid-view.svg';\r\n\r\n\r\nfunction Views(props) {\r\n    const [isGridView, setIsGridView] = useState(JSON.parse(sessionStorage.getItem('gridViewBoolean')) || false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        /*\r\n        *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n        *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n        */\r\n\r\n        sessionStorage.setItem('gridViewBoolean', isGridView);\r\n\r\n\r\n        if (isGridView) {\r\n\r\n            document.getElementById(\"list_view_button\").disabled = false;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"grid_view_button\").disabled = true;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\r\n\r\n\r\n\r\n        } else {\r\n            document.getElementById(\"grid_view_button\").disabled = false;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"list_view_button\").disabled = true;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\r\n\r\n        }\r\n\r\n    }, [isGridView])\r\n\r\n    return (\r\n        <>\r\n            <div id=\"display_options\">\r\n                <input onClick={() => { setIsGridView((isGridView) => !isGridView) }} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view_icon} alt=\"List view button\" />\r\n                <input onClick={() => { setIsGridView((isGridView) => !isGridView) }} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view_icon} alt=\"Grid view button\" />\r\n            </div>\r\n\r\n\r\n            {isGridView ? <GridView data={props.data} /> : <ListView data={props.data} />}\r\n        </>\r\n\r\n    )\r\n\r\n}\r\nexport default Views;"]},"metadata":{},"sourceType":"module"}