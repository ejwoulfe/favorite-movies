{"ast":null,"code":"var _jsxFileName = \"D:\\\\Favorite Movies Project\\\\client\\\\src\\\\components\\\\lists\\\\data_lists.jsx\";\nimport React from 'react';\nimport axios from \"axios\";\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport list_view from \"../../Assets/UI Icons/list-view.svg\";\nimport grid_view from \"../../Assets/UI Icons/grid-view.svg\";\n\nfunction ListComponent(props) {\n  const [dataList, setDataList] = useState([]);\n  const [gridView, setGridView] = useState(JSON.parse(sessionStorage.getItem('moviesGridViewBoolean')) || false);\n  useEffect(() => {\n    /*\r\n    *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n    *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n    */\n    sessionStorage.setItem('moviesGridViewBoolean', gridView);\n\n    if (gridView) {\n      document.getElementById(\"list_view_button\").disabled = false;\n      document.getElementById(\"list_view_button\").style.opacity = \"1\";\n      document.getElementById(\"grid_view_button\").disabled = true;\n      document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\n    } else {\n      document.getElementById(\"grid_view_button\").disabled = false;\n      document.getElementById(\"grid_view_button\").style.opacity = \"1\";\n      document.getElementById(\"list_view_button\").disabled = true;\n      document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\n    }\n  }, [gridView]);\n  useEffect(() => {\n    let pathName = props.location.pathname;\n    let underScoreIndex = pathName.indexOf(\"_\");\n    let dataName = props.location.pathname.substring(1, underScoreIndex);\n    let fetchUrl = 'http://localhost:5000/' + dataName + '/api';\n    axios({\n      method: 'GET',\n      url: fetchUrl\n    }).then(res => {\n      setDataList(res.data);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"movies_list_content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"movies_list_title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"Movies\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"display_options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => {\n      setGridView(gridView => !gridView);\n    },\n    className: \"view_buttons\",\n    id: \"list_view_button\",\n    type: \"image\",\n    src: list_view,\n    alt: \"List view button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => {\n      setGridView(gridView => !gridView);\n    },\n    className: \"view_buttons\",\n    id: \"grid_view_button\",\n    type: \"image\",\n    src: grid_view,\n    alt: \"Grid view button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  })), dataList.map((actor, i) => /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, \"actor.title\")));\n}\n\nexport default ListComponent;","map":{"version":3,"sources":["D:/Favorite Movies Project/client/src/components/lists/data_lists.jsx"],"names":["React","axios","useState","useEffect","ListComponent","props","dataList","setDataList","gridView","setGridView","JSON","parse","sessionStorage","getItem","setItem","document","getElementById","disabled","style","opacity","pathName","location","pathname","underScoreIndex","indexOf","dataName","substring","fetchUrl","method","url","then","res","data","list_view","grid_view","map","actor","i"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from \"axios\";\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport list_view from '../../Assets/UI Icons/list-view.svg'\r\nimport grid_view from '../../Assets/UI Icons/grid-view.svg'\r\n\r\n\r\n\r\nfunction ListComponent(props) {\r\n    const [dataList, setDataList] = useState([]);\r\n    const [gridView, setGridView] = useState(JSON.parse(sessionStorage.getItem('moviesGridViewBoolean')) || false);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        /*\r\n        *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n        *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n        */\r\n\r\n        sessionStorage.setItem('moviesGridViewBoolean', gridView);\r\n\r\n\r\n        if (gridView) {\r\n            document.getElementById(\"list_view_button\").disabled = false;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"grid_view_button\").disabled = true;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\r\n\r\n        } else {\r\n            document.getElementById(\"grid_view_button\").disabled = false;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"list_view_button\").disabled = true;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\r\n\r\n        }\r\n\r\n\r\n\r\n    }, [gridView])\r\n\r\n    useEffect(() => {\r\n\r\n        let pathName = props.location.pathname;\r\n        let underScoreIndex = pathName.indexOf(\"_\");\r\n        let dataName = props.location.pathname.substring(1, underScoreIndex);\r\n        let fetchUrl = 'http://localhost:5000/' + dataName + '/api';\r\n\r\n\r\n\r\n        axios({\r\n            method: 'GET',\r\n            url: fetchUrl\r\n        }).then(res => {\r\n            setDataList(res.data)\r\n\r\n        })\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div id=\"movies_list_content\">\r\n            <h1 id=\"movies_list_title\">Movies</h1>\r\n            <div id=\"display_options\">\r\n                <input onClick={() => { setGridView((gridView) => !gridView) }} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view} alt=\"List view button\" />\r\n                <input onClick={() => { setGridView((gridView) => !gridView) }} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view} alt=\"Grid view button\" />\r\n            </div>\r\n\r\n\r\n\r\n            {dataList.map((actor, i) => (\r\n                <h4>actor.title</h4>\r\n            ))}\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default ListComponent;"]},"metadata":{},"sourceType":"module"}