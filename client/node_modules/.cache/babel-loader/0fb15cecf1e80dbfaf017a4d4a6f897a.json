{"ast":null,"code":"var _jsxFileName = \"D:\\\\Favorite Movies Project\\\\client\\\\src\\\\components\\\\lists\\\\view_components\\\\views.jsx\";\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport GridView from './grid_view/grid_view';\nimport ListView from './list_view/list_view';\nimport list_view_icon from \"../../../Assets/UI Icons/list-view.svg\";\nimport grid_view_icon from \"../../../Assets/UI Icons/grid-view.svg\";\n\nfunction Views(props) {\n  const [isMovieGridView, setIsMovieGridView] = useState(JSON.parse(sessionStorage.getItem('movieGridViewBoolean')) || false);\n  const [isActorGridView, setIsActorGridView] = useState(JSON.parse(sessionStorage.getItem('actorGridViewBoolean')) || false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    /*\r\n    *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n    *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n    */\n    if (props.type === 'actor') {\n      sessionStorage.setItem('actorGridViewBoolean', isActorGridView);\n    } else {\n      sessionStorage.setItem('movieGridViewBoolean', isMovieGridView);\n    }\n\n    if (isActorGridView || isMovieGridView) {\n      document.getElementById(\"list_view_button\").disabled = false;\n      document.getElementById(\"list_view_button\").style.opacity = \"1\";\n      document.getElementById(\"grid_view_button\").disabled = true;\n      document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\n    } else {\n      document.getElementById(\"grid_view_button\").disabled = false;\n      document.getElementById(\"grid_view_button\").style.opacity = \"1\";\n      document.getElementById(\"list_view_button\").disabled = true;\n      document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\n    }\n  }, [isActorGridView, isMovieGridView, props.type]);\n  useEffect(() => {\n    if (props.data.length > 0) {\n      setLoading(false);\n    }\n  }, [props]);\n\n  function loadViews(type) {\n    if (isActorGridView || isMovieGridView) {\n      return /*#__PURE__*/React.createElement(GridView, {\n        data: props.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(ListView, {\n        data: props.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      });\n    }\n  }\n\n  function changeViewOption() {\n    console.log(props.type);\n\n    if (props.type === 'actor') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n        onClick: () => {\n          setIsActorGridView(isActorGridView => !isActorGridView);\n        },\n        className: \"view_buttons\",\n        id: \"list_view_button\",\n        type: \"image\",\n        src: list_view_icon,\n        alt: \"List view button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        onClick: () => {\n          setIsActorGridView(isActorGridView => !isActorGridView);\n        },\n        className: \"view_buttons\",\n        id: \"grid_view_button\",\n        type: \"image\",\n        src: grid_view_icon,\n        alt: \"Grid view button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }));\n    } else if (props.type === 'movie') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n        onClick: () => {\n          setIsMovieGridView(isMovieGridView => !isMovieGridView);\n        },\n        className: \"view_buttons\",\n        id: \"list_view_button\",\n        type: \"image\",\n        src: list_view_icon,\n        alt: \"List view button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        onClick: () => {\n          setIsMovieGridView(isMovieGridView => !isMovieGridView);\n        },\n        className: \"view_buttons\",\n        id: \"grid_view_button\",\n        type: \"image\",\n        src: grid_view_icon,\n        alt: \"Grid view button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"display_options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => changeViewOption(),\n    className: \"view_buttons\",\n    id: \"list_view_button\",\n    type: \"image\",\n    src: list_view_icon,\n    alt: \"List view button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => changeViewOption(),\n    className: \"view_buttons\",\n    id: \"grid_view_button\",\n    type: \"image\",\n    src: grid_view_icon,\n    alt: \"Grid view button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  })), loading ? /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 24\n    }\n  }, \"Loading\") : loadViews());\n}\n\nexport default Views;","map":{"version":3,"sources":["D:/Favorite Movies Project/client/src/components/lists/view_components/views.jsx"],"names":["React","useState","useEffect","GridView","ListView","Views","props","isMovieGridView","setIsMovieGridView","JSON","parse","sessionStorage","getItem","isActorGridView","setIsActorGridView","loading","setLoading","type","setItem","document","getElementById","disabled","style","opacity","data","length","loadViews","changeViewOption","console","log","list_view_icon","grid_view_icon"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport GridView from './grid_view/grid_view';\r\nimport ListView from './list_view/list_view';\r\nimport list_view_icon from '../../../Assets/UI Icons/list-view.svg';\r\nimport grid_view_icon from '../../../Assets/UI Icons/grid-view.svg';\r\n\r\n\r\nfunction Views(props) {\r\n    const [isMovieGridView, setIsMovieGridView] = useState(JSON.parse(sessionStorage.getItem('movieGridViewBoolean')) || false);\r\n    const [isActorGridView, setIsActorGridView] = useState(JSON.parse(sessionStorage.getItem('actorGridViewBoolean')) || false);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n\r\n        /*\r\n        *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n        *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n        */\r\n        if (props.type === 'actor') {\r\n            sessionStorage.setItem('actorGridViewBoolean', isActorGridView);\r\n        } else {\r\n            sessionStorage.setItem('movieGridViewBoolean', isMovieGridView);\r\n        }\r\n\r\n\r\n\r\n        if (isActorGridView || isMovieGridView) {\r\n\r\n            document.getElementById(\"list_view_button\").disabled = false;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"grid_view_button\").disabled = true;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\r\n\r\n\r\n\r\n        } else {\r\n            document.getElementById(\"grid_view_button\").disabled = false;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"list_view_button\").disabled = true;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\r\n\r\n        }\r\n\r\n    }, [isActorGridView, isMovieGridView, props.type]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.data.length > 0) {\r\n            setLoading(false);\r\n        }\r\n\r\n    }, [props]);\r\n\r\n\r\n    function loadViews(type) {\r\n        if (isActorGridView || isMovieGridView) {\r\n            return (\r\n                <GridView data={props.data} />\r\n            )\r\n        } else {\r\n            return (\r\n                <ListView data={props.data} />\r\n            )\r\n        }\r\n    }\r\n    function changeViewOption() {\r\n        console.log(props.type)\r\n        if (props.type === 'actor') {\r\n            return (\r\n                <>\r\n                    <input onClick={() => { setIsActorGridView((isActorGridView) => !isActorGridView) }} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view_icon} alt=\"List view button\" />\r\n                    <input onClick={() => { setIsActorGridView((isActorGridView) => !isActorGridView) }} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view_icon} alt=\"Grid view button\" />\r\n                </>\r\n            )\r\n        } else if (props.type === 'movie') {\r\n            return (\r\n                <>\r\n                    <input onClick={() => { setIsMovieGridView((isMovieGridView) => !isMovieGridView) }} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view_icon} alt=\"List view button\" />\r\n                    <input onClick={() => { setIsMovieGridView((isMovieGridView) => !isMovieGridView) }} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view_icon} alt=\"Grid view button\" />\r\n                </>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"display_options\">\r\n                <input onClick={() => changeViewOption()} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view_icon} alt=\"List view button\" />\r\n                <input onClick={() => changeViewOption()} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view_icon} alt=\"Grid view button\" />\r\n            </div>\r\n\r\n            {loading ? <h1>Loading</h1> : loadViews()}\r\n        </>\r\n\r\n    )\r\n\r\n}\r\nexport default Views;"]},"metadata":{},"sourceType":"module"}