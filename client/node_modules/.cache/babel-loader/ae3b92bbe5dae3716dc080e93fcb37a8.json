{"ast":null,"code":"var _jsxFileName = \"D:\\\\Favorite Movies Project\\\\client\\\\src\\\\components\\\\lists\\\\data_lists.jsx\";\nimport React from 'react';\nimport axios from \"axios\";\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport './data_lists.scss';\nimport list_view from \"../../Assets/UI Icons/list-view.svg\";\nimport grid_view from \"../../Assets/UI Icons/grid-view.svg\";\n\nfunction ListComponent(props) {\n  const [dataList, setDataList] = useState([]);\n  const [gridView, setGridView] = useState(JSON.parse(sessionStorage.getItem('moviesGridViewBoolean')) || false);\n  const [pathName] = useState(props.location.pathname);\n  const [isMoviesPage, setIsMoviesPage] = useState(false);\n  useEffect(() => {\n    /*\r\n    *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n    *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n    */\n    sessionStorage.setItem('moviesGridViewBoolean', gridView);\n\n    if (gridView) {\n      document.getElementById(\"list_view_button\").disabled = false;\n      document.getElementById(\"list_view_button\").style.opacity = \"1\";\n      document.getElementById(\"grid_view_button\").disabled = true;\n      document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\n    } else {\n      document.getElementById(\"grid_view_button\").disabled = false;\n      document.getElementById(\"grid_view_button\").style.opacity = \"1\";\n      document.getElementById(\"list_view_button\").disabled = true;\n      document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\n    }\n  }, [gridView]);\n  useEffect(() => {\n    let underScoreIndex = pathName.indexOf(\"_\");\n    let dataName = pathName.substring(1, underScoreIndex);\n    let fetchUrl = 'http://localhost:5000/' + dataName + '/api';\n    axios({\n      method: 'GET',\n      url: fetchUrl\n    }).then(res => {\n      setDataList(res.data);\n    });\n\n    if (dataName === \"movies\") {\n      setIsMoviesPage(true);\n    } else {\n      setIsMoviesPage(false);\n    }\n  }, [pathName]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"data_list_content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"data_list_title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, isMoviesPage ? \"Movies\" : \"Actors\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"display_options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => {\n      setGridView(gridView => !gridView);\n    },\n    className: \"view_buttons\",\n    id: \"list_view_button\",\n    type: \"image\",\n    src: list_view,\n    alt: \"List view button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => {\n      setGridView(gridView => !gridView);\n    },\n    className: \"view_buttons\",\n    id: \"grid_view_button\",\n    type: \"image\",\n    src: grid_view,\n    alt: \"Grid view button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  })), isMoviesPage ? dataList.map((actor, i) => /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, actor.title)) : dataList.map((actor, i) => /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }, actor.name)));\n}\n\nexport default ListComponent;","map":{"version":3,"sources":["D:/Favorite Movies Project/client/src/components/lists/data_lists.jsx"],"names":["React","axios","useState","useEffect","ListComponent","props","dataList","setDataList","gridView","setGridView","JSON","parse","sessionStorage","getItem","pathName","location","pathname","isMoviesPage","setIsMoviesPage","setItem","document","getElementById","disabled","style","opacity","underScoreIndex","indexOf","dataName","substring","fetchUrl","method","url","then","res","data","list_view","grid_view","map","actor","i","title","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from \"axios\";\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport './data_lists.scss';\r\nimport list_view from '../../Assets/UI Icons/list-view.svg'\r\nimport grid_view from '../../Assets/UI Icons/grid-view.svg'\r\n\r\n\r\n\r\nfunction ListComponent(props) {\r\n    const [dataList, setDataList] = useState([]);\r\n    const [gridView, setGridView] = useState(JSON.parse(sessionStorage.getItem('moviesGridViewBoolean')) || false);\r\n    const [pathName] = useState(props.location.pathname);\r\n    const [isMoviesPage, setIsMoviesPage] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        /*\r\n        *  Which ever view is selected, disable to corresponding button and reduce its opacity by 50%.\r\n        *  The other button will maintain its 100% opacity, changes it occordingly based on the current view.\r\n        */\r\n\r\n        sessionStorage.setItem('moviesGridViewBoolean', gridView);\r\n\r\n\r\n        if (gridView) {\r\n            document.getElementById(\"list_view_button\").disabled = false;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"grid_view_button\").disabled = true;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"0.5\";\r\n\r\n        } else {\r\n            document.getElementById(\"grid_view_button\").disabled = false;\r\n            document.getElementById(\"grid_view_button\").style.opacity = \"1\";\r\n\r\n            document.getElementById(\"list_view_button\").disabled = true;\r\n            document.getElementById(\"list_view_button\").style.opacity = \"0.5\";\r\n\r\n        }\r\n\r\n\r\n\r\n    }, [gridView])\r\n\r\n    useEffect(() => {\r\n\r\n        let underScoreIndex = pathName.indexOf(\"_\");\r\n        let dataName = pathName.substring(1, underScoreIndex);\r\n        let fetchUrl = 'http://localhost:5000/' + dataName + '/api';\r\n\r\n\r\n\r\n        axios({\r\n            method: 'GET',\r\n            url: fetchUrl\r\n        }).then(res => {\r\n            setDataList(res.data)\r\n\r\n\r\n        })\r\n\r\n        if (dataName === \"movies\") {\r\n            setIsMoviesPage(true);\r\n        } else {\r\n            setIsMoviesPage(false);\r\n        }\r\n\r\n\r\n    }, [pathName]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div id=\"data_list_content\">\r\n            <h1 id=\"data_list_title\">{isMoviesPage ? \"Movies\" : \"Actors\"}</h1>\r\n            <div id=\"display_options\">\r\n                <input onClick={() => { setGridView((gridView) => !gridView) }} className=\"view_buttons\" id=\"list_view_button\" type=\"image\" src={list_view} alt=\"List view button\" />\r\n                <input onClick={() => { setGridView((gridView) => !gridView) }} className=\"view_buttons\" id=\"grid_view_button\" type=\"image\" src={grid_view} alt=\"Grid view button\" />\r\n            </div>\r\n\r\n\r\n\r\n\r\n            {/* Create Actor/Movie Object\r\n            Movie: {\r\n                name: movie.title,\r\n                image: movie.poster,\r\n                description: movie.description,\r\n                array: movie.actors,\r\n                subInfo: {\r\n                    1: movie.rating,\r\n                    2: movie.director,\r\n                    3: movie.releaseDate,\r\n                    4: movie.year\r\n                }\r\n            } \r\n            Actor: {\r\n                name: actor.name,\r\n                image: actor.image,\r\n                description: actor.description,\r\n                array: actor.movies,\r\n                subInfo: {\r\n                    1: actor.birth_year\r\n                }\r\n            }*/}\r\n            {isMoviesPage ?\r\n                dataList.map((actor, i) => (\r\n                    <h4>{actor.title}</h4>\r\n                ))\r\n                :\r\n                dataList.map((actor, i) => (\r\n                    <h4>{actor.name}</h4>\r\n                ))\r\n            }\r\n\r\n\r\n        </div >\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default ListComponent;"]},"metadata":{},"sourceType":"module"}